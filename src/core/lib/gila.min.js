
function gItem(x) {
    this.all = x;
}


g = function(x){
    if (typeof x !== 'undefined') {
        if(typeof x === 'object') return new gItem([x]);
        all = document.querySelectorAll(x);
        return new gItem(all);
    }
}

var g_click_queries = new Array();

g.el = function(id) {
    return document.getElementById(id);
}
// Prototypes


//gtest.all







gItem.prototype.html = function (html){
    if (typeof html === 'undefined') return this.all[0].innerHTML
    for(let value of this.all){
        value.innerHTML = html
    }
    return this
}

gItem.prototype.attr = function (attr,val){
    if (typeof val === 'undefined') return this.all[0].getAttribute(attr)
    for(let value of this.all){
        value.setAttribute(attr, val)
    }
    return this
}

gItem.prototype.style = function (attr,val){
    if (typeof val === 'undefined') return this.style[attr]
    for(let value of this.all){
        value.style[attr] = val
    }
    return this
}

gItem.prototype.remove = function (){
    for(let value of this.all){
        value.parentElement.removeChild(value)
    }
}

gItem.prototype.findUp = function (q){
    var x = document.querySelectorAll(q);
    _this = this;
    while (this.all[0]) {
        console.log(this.all[0].href)
        this.all[0] = this.all[0].parentNode;
        for (xi = 0; xi < x.length; xi++) {
            if(this.all[0].isSameNode(x[xi])) return this;
        }
    }
    _this.all=[]
    return _this;
}


gItem.prototype.parent = function (){
    this.all = [this.all[0].parentNode];
    return this;
};
gItem.prototype.children = function (){
    var n=this.all[0].firstChild;
    this.all = [];
    for ( ; n; n = n.nextSibling )
       if ( n.nodeType == 1) this.all.push( n );
    return this;
};
gItem.prototype.find = function (x){
    if(typeof this.all[0]!='undefined') this.all = this.all[0].querySelectorAll(x);
    return this;
};

gItem.prototype.append = function (html,data,data_timeout){
    for(let value of this.all){
        let template = document.createElement('template');
        template.innerHTML = html;
        value.appendChild(template.content.firstChild)

        if (typeof data !== 'undefined') {
			for(let attr in data) template.content.firstChild[attr] = data[attr];
		}

        if (typeof data_timeout !== 'undefined') setTimeout(function () {
			for(let attr in data_timeout){
				template.content.firstChild[attr] = data_timeout[attr]
			}
		}, 100)
    }
    return this
}
gItem.prototype.prepend = function (html,data){
    for(let value of this.all){
        let template = document.createElement('template');
        template.innerHTML = html;
        value.insertBefore(template.content.firstChild,value.childNodes[0])

        if (typeof data !== 'undefined') {
			for(let attr in data) template.content.firstChild[attr] = data[attr];
		}

    }
    return this
}


gItem.prototype.createNS = function (node,data,data_timeout){
    for(let value of this.all){
        let child = document.createElementNS("http://www.w3.org/2000/svg", node);
        for(let attr in data)  child.setAttribute(attr,data[attr])
		value.appendChild(child)
        if (typeof data_timeout !== 'undefined') setTimeout(function () {
			for(let attr in data_timeout) child.setAttribute(attr,data_timeout[attr])
		}, 100)
    }
    return this
}


gItem.prototype.addClass = function (x){
    for(let value of this.all){
        value.classList.add(x)
    }
}

gItem.prototype.removeClass = function (x){
    for(let value of this.all){
        value.classList.remove(x)
    }
}
gItem.prototype.toggleClass = function (x){
    for(let value of this.all){
        value.classList.toggle(x);
    }
}
gItem.prototype.hasClass = function (x){
    for(let value of this.all){
        if(value.classList.contains(x)) return true;
    }
    return false;
}

document.onclick = function(event){
    for(let i in g_click_queries) if(isNaN(i)){
        var x = document.querySelectorAll(i);
        for (xi = 0; xi < x.length; xi++) {
            if(event.target.isSameNode(x[xi])) {
                event.target.fn = g_click_queries[i].bind(event.target);
                event.target.fn(event)
            } else {
                el= event.target;
                while(el=el.parentNode) {
                    if(el.isSameNode(x[xi])) {
                        el.fn = g_click_queries[i].bind(el);
                        el.fn(event)
                    }
                }
            }
        }
    }
};

gItem.prototype.event = function (ev,fn,name){
    for(let value of this.all){
        value.addEventListener(ev, fn);
        if(typeof name!='undefined') value.setAttribute('data-event')=name;
    }
}
g.click = function (query,fn){
    g_click_queries[query] = fn;
}

gItem.prototype.load = function(path){
  var xhttp = new XMLHttpRequest();
  var _g = this;
  xhttp.onreadystatechange = function() {
    if (this.readyState == 4 && this.status == 200) {
        for(let value of _g.all) value.innerHTML = this.responseText;
    }
  };
  xhttp.open("GET", path, true);
  xhttp.send();
}


g.ajax = function(args,params,fun,type){
    if(typeof args!='object') {
        g.ajaxOld(args,params,fun,type)
        return
    }
    var xhttp = new XMLHttpRequest();

    xhttp.open(args.method, args.url, true);
    _fn = args.fn
    xhttp.onreadystatechange = function() {
      if (this.readyState == 4 && this.status == 200)  {
          if(typeof args.type!='undefined'||args.type=='json') {
              this.responseText = JSON.parse(this.responseText);
          }
         args.fn(this.responseText);
     }//else args.fn(false);
    };
    if(typeof args.header!='undefined') xhttp.setRequestHeader("Content-type", args.header);
    xhttp.send(args.data);
}

g.ajaxOld = function(path,params,fn,type){
    var xhttp = new XMLHttpRequest();

    if(typeof params !== 'function') {
        g.ajax({url:path,method:'POST',data:params,fn:fn,type:type})
    } else {
        g.ajax({url:path,method:'GET',fn:params})
    }
}

g.post = function(path,params,fn){
    g.ajax({url:path,method:'POST',header:"application/x-www-form-urlencoded",data:params,fn:fn})
}

g.get = function(path,fn){
    g.ajax({url:path,method:'GET',fn:fn})
}

g.postJSON = function(path,params,fn){
    g.ajax({url:path,method:'POST',header:"application/x-www-form-urlencoded",data:params,fn:fn,type:'json'})
}

g.popup = function (html,col){
    if (typeof col != 'undefined') {
        g.dialog({body:html,class:col});
    } else g.dialog({body:html});
}

g.modal = function (p){
    p.type='modal'
    g.dialog(p)
}

g.dialog = function (p){
    var default_params = {class:'',escape:true,body:'',title:'',foot:'',img:'',buttons:'ok',type:'',id:'gila-popup'};
    for(i in default_params) if(typeof p[i] == 'undefined') p[i] = default_params[i];
    if(p.type=='modal') {
        closebtn = '<span class="closebtn" onclick="g(this.parentNode.parentNode).remove();">×</span>';
    } else {
        closebtn = '<span class="closebtn" onclick="g(this.parentNode).remove();">×</span>';
    }
    dsclick =''


    if(p.title!='') p.title='<div class="title">'+p.title+'</div>';
    if(p.body!='') p.body='<div class="body">'+p.body+'</div>';
    p.class='bg-white curved '+p.class;
    buttons='';
    if(p.buttons!='') for(btni of p.buttons.split(' ')) {
        if(typeof g.dialog.buttons[btni] == 'undefined') {
            console.log('Dialog Button '+btni+' not defined');
        } else {
            btn = g.dialog.buttons[btni];
            if(typeof btn.class=='undefined') btn.class='default';
            if(typeof btn.fn=='undefined') btn.fn='';
            buttons+='<button class="btn '+btn.class+'" onclick="g.dialog.buttons.'+btni+'.fn(this)">'+btn.title+'</button>';
        }
    }
    p.foot=buttons+p.foot;
    if(p.foot!='') p.foot='<div class="foot">'+p.foot+'</div>';
    if(p.escape == false) {
        dsclick='';
        closebtn=''
    }
    // onclick="event.stopPropagation()"
    append='<div id=\''+p.id+'\' class="'+p.class+' gila-popup">'+closebtn+p.title+p.img+p.body+p.foot+'</div>';
    if(p.type=='modal'){
      g(document.body).append('<div class=\'gila-darkscreen\''+dsclick+'">'+append+'</div>');
    } else g(document.body).append(append)
}

g.dialog.buttons = [];
g.dialog.buttons.ok = {title:'Ok',fn:function(e){
    g(e).findUp('.gila-darkscreen').remove()
}};


g.alert = function (html,type,callback){
    foot=''; buttons='ok'; icon='';
    if (typeof type !== 'undefined') {
        if (type=='success') icon="<i class=\'fa fa-check-circle-o fa-5x\' aria-hidden=\'true\' style=\'color:green\'></i><br>";
        if (type=='error') icon="<i class=\'fa fa-times-circle-o fa-5x\' aria-hidden=\'true\' style=\'color:red\'></i><br>";
        if (type=='warning') icon="<i class=\'fa fa-exclamation-triangle fa-5x\' aria-hidden=\'true\' style=\'color:yellow\'></i><br>";
        if (type=='notice') icon="<i class=\'fa fa-exclamation-circle fa-5x\' aria-hidden=\'true\' style=\'color:blue\'></i><br>";
    }
    if (typeof callback !== 'undefined') {
        foot="<a class='btn' onclick='g(\"#gila-darkscreen\").remove();"+callback+"'>OK</a>";
        buttons='';
    }
    //g.popup("<div class='title'>Alert</div><div class='body'>"+html+"</div><div class='footer text-align-center row'><a class='btn' onclick='g(\"#gila-darkscreen\").remove();"+callback+"'>OK</a></div>",{class:'small',escape:false});
    g.dialog({body:icon+'<h2>'+html+'</h2>',class:'small text-align-center',escape:false,buttons:buttons,foot:foot,type:'modal'});
}


var g_requiredGroup = new Array();
var g_baseUrl = "res/";

g.require = function (res, callback = function(){ return } ) {

    if(Array.isArray(res)) {
        var group_n = g_requiredGroup.length;
        g_requiredGroup[group_n] = { loaded:0, fn:callback };
        var gcall = "if(g_requiredGroup["+group_n+"].loaded == "+res.length+"){ g_requiredGroup["+group_n+"].fn(); alert('ok'); }else g_requiredGroup["+group_n+"].loaded++;";
        for(r=0; r<res.length; r++) {
            g.require( res[r],function(){ gila_group_callback(res.length,group_n); });
        };

        return;
    }

    var rRes = requiredRes[res];

    if(typeof rRes == 'undefined') {
        console.warn(res+" is not defined in require.js");
        requiredRes[res]={wjs:res};
        rRes = requiredRes[res];
    }

    if(rRes.loaded == true) {
        callback();
        return;
    }

    if(rRes.dep) {
        g.require(rRes.dep, function(){
            if(rRes.css) g.loadCSS(g_baseUrl+rRes.css);
            if(rRes.js) g.loadJS(rRes,callback);
            if(rRes.wjs) g.loadJS(rRes,callback);
            //callback();
        });
    }else{
        if(rRes.css) g.loadCSS(g_baseUrl+rRes.css);
        if(rRes.js) g.loadJS(rRes,callback);
        if(rRes.wjs) g.loadJS(rRes,callback);
    }

}

g.loadJS = function (res, callback = function(){ return } ) {

    if(typeof res.wjs == 'undefined') url = g_baseUrl+res.js; else url = res.wjs;

    var script = document.createElement("script")
    script.type = "text/javascript";

    if(res.loaded == true){
        callback();
        return;
    }else{
        if(typeof res.callbacks == 'undefined') res.callbacks = new Array();
        res.callbacks.push(callback);
    }

    if (script.readyState){  //IE
        script.onreadystatechange = function(){
            if (script.readyState == "loaded" ||
                script.readyState == "complete"){
                script.onreadystatechange = null;
                res.loaded = true;
                for(i in res.callbacks) res.callbacks[i]();
            }
        };
    } else {
        script.onload = function(){
            res.loaded = true;
            for(i in res.callbacks) res.callbacks[i]();
        };
    }

    script.src = url;
    if(res.dev == 1) script.src += "?"+Math.random();

    if( res.loading != true ) {
        document.getElementsByTagName("head")[0].appendChild(script);
        console.log(url+" loaded");
        res.loading = true;
    }
}

g.loadCSS = function (url) {
    var fileref = document.createElement("link");
    fileref.setAttribute("rel", "stylesheet");
    fileref.setAttribute("type", "text/css");
    fileref.setAttribute("href", url);
    document.getElementsByTagName("head")[0].appendChild(fileref);
}

gila_group_callback = function (n,group_n) {
    g_requiredGroup[group_n].loaded++;
    if(g_requiredGroup[group_n].loaded == n){
        g_requiredGroup[group_n].fn();
        console.log(g_requiredGroup[group_n].loaded+'!');
    } else {
        console.log(g_requiredGroup[group_n].loaded);
    }

}
